<div class="stars">
  <div class="row">
    <div class="col-md-7">
      <h2 style="color: white;">Who's in Space Right Now?</h2>
      <p style="color: white;">
        This data is from the <a href="http://open-notify.org/Open-Notify-API/">ISS</a> API showing you who is actually in space at this very moment.
      </p>
    </div>
    <div class="col-md-5">
      <div>
        <a role="button" data-toggle="collapse" href="#collapseExample" aria-expanded="false" aria-controls="collapseExample">
        </a>
        <h2 style="color: white;">Where is the ISS right now?</h2>
        <p style="color: white;">
          This data is from the <a href="http://open-notify.org/Open-Notify-API/">ISS</a> API showing you where the ISS is at this very moment.
        </p>
        <div class="location">
        </div>
        <button class="updateLocation">Update ISS</button>
        <img class="map-image" src="/assets/icon-iss.png"></img>
        <div>
          <h3 class="caption2 hvr-fade">The ISS will pass overhead in:</h3>
        </div>

      </div>
    </div>
  </div>

  <script type="text/html" id="template-astronaut">
    <div class="imageHolder a">
      <img class="space-img" src="/assets/astronaut.png" alt="" />
      <div class="caption"></div>
    </div>
  </script>
</div>

<% content_for :head do %>
  <style type="text/css">
    .imageHolder {
      position: absolute;
      display: inline-block;
      width: 200px;
      height: 200px;
      margin: 5px;
    }
    .space-img{
      max-height: 200px;
    }
    .caption {
      position: relative;
      width: 150px;
      height: 30px;
      bottom: 0px;
      color: #000000;
      background: white;
      text-align:center;
      font-weight:bold;
      line-height: 2em;
      opacity:0.7;
    }
    .whos_in_space{
      background-image: url('/assets/stars.jpg');
    }
    .location {
      height: 300px;
      width: 100%;
    }
    /* for the astronaut container*/
    .iss {
      margin: 10px;
    }
    .map-image {
      z-index: 1000;
    }
    .caption2 {
      width: 100%;
      height: 60px;
      padding: 15px;
      background-color: white;
      opacity: 0.6;
      filter: alpha(opacity=40); /* For IE8 and earlier */
    }
    .hvr-fade {
      display: inline-block;
      vertical-align: middle;
      -webkit-transform: translateZ(0);
      transform: translateZ(0);
      box-shadow: 0 0 1px rgba(0, 0, 0, 0);
      -webkit-backface-visibility: hidden;
      backface-visibility: hidden;
      -moz-osx-font-smoothing: grayscale;
      overflow: hidden;
      -webkit-transition-duration: 0.3s;
      transition-duration: 0.3s;
      -webkit-transition-property: color, background-color;
      transition-property: color, background-color;
    }
    .hvr-fade:hover, .hvr-fade:focus, .hvr-fade:active {
      background-color: #5865cd;
      color: white;
    }
  </style>

<% end %>

<% content_for :footer do %>
  <script>
    function makeNewPosition($container) {
      // Get viewport dimensions (remove the dimension of the div)
      $container = ($container || $(window))
      var h = $container.height() - 50;
      var w = $container.width() - 50;

      var nh = Math.floor(Math.random() * h);
      var nw = Math.floor(Math.random() * w);

      return [nh, nw];
    }

    function animateDiv($target) {
      var newq = makeNewPosition($target.parent());
      var oldq = $target.offset();
      var speed = calcSpeed([oldq.top, oldq.left], newq);

      $target.animate({
        top: newq[0],
        left: newq[1]
      }, speed, function() {
        animateDiv($target);
      });
    };

    function calcSpeed(prev, next) {
      var x = Math.abs(prev[1] - next[1]);
      var y = Math.abs(prev[0] - next[0]);

      var greatest = x > y ? x : y;

      var speedModifier = .02;

      var speed = Math.ceil(greatest / speedModifier);

      return speed;
    }

    function overheadPasses(latitude, longitude) {
      $.getJSON('http://api.open-notify.org/iss-pass.json?lat=' + latitude + '&lon=' + longitude + '&alt=20&n=5&callback=?', function(data) {
        data['response'].forEach(function (d) {
          var date = new Date(d['risetime']*1000);
           console.log(date)
        });
      });
    }

    function drawISSLocation() {
      $.getJSON('http://api.open-notify.org/iss-now.json?callback=?', function(data) {
        var zoomlevel = 3;
        var latitude = data['iss_position']['latitude'];
        var longitude = data['iss_position']['longitude'];

        var img = new Image();
        img.src = "https://maps.googleapis.com/maps/api/staticmap?center=" + latitude + "," + longitude + "&zoom=" + zoomlevel + "&size=470x300&sensor=false";
        $('.location').html(img)
      });
    }

    function drawAstronauts() {
      $.getJSON('http://api.open-notify.org/astros.json?callback=?', function(data) {
        data['people'].forEach(function (person) {
          var template = $($('#template-astronaut').html());
          $('.caption', template).text(person.name);
          $('.stars').append(template);
          animateDiv($(template));
        });
      });
    }

    function drawOverheadPasses() {
      if ("geolocation" in navigator) {
        navigator.geolocation.getCurrentPosition(function(position) {
          var latitude  = position.coords.latitude;
          var longitude = position.coords.longitude;

          overheadPasses(latitude, longitude);
        }, function () {
          console.log("geolocating failed", args);
        });
      } else {
        console.log("geolocation not available")
      }
    }

    $(document).ready(function() {
      drawAstronauts();
      drawISSLocation();
      drawOverheadPasses();

      $('.updateLocation').on('click', drawISSLocation);
    });
  </script>

<% end %>

<!--

Kata Name Idea: Many Calls to View the Sky
===============

EvalError: Raised when the eval() functions is used in an incorrect manner.

RangeError: Raised when a numeric variable exceeds its allowed range.

ReferenceError: Raised when an invalid reference is used.

SyntaxError: Raised when a syntax error occurs while parsing JavaScript code.

TypeError: Raised when the type of a variable is not as expected.

URIError: Raised when the encodeURI() or decodeURI() functions are used in an incorrect manner.

-->